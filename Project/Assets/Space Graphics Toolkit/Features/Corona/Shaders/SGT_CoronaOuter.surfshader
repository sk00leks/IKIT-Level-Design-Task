BEGIN_OPTIONS
	Workflow "Unlit"
	Alpha "Blend"
END_OPTIONS

BEGIN_PASS("All")
	ZTest LEqual
	Cull Front
END_PASS

BEGIN_PROPERTIES
	_Color("Color", Color) = (1, 1, 1, 1)
	_DepthTex("Depth Tex", 2D) = "white" {}
	_HorizonLengthRecip("Horizon Length Recip", Float) = 0
	_Sky("Sky", Float) = 0
END_PROPERTIES

BEGIN_DEFINES
	#pragma multi_compile_local __ _SOFTNESS
END_DEFINES

BEGIN_SUBSHADERS
	"../../Shared/Shaders/SGT_Matrix.surfshader"
	"../../Shared/Shaders/SGT_Output.surfshader"
END_SUBSHADERS

BEGIN_CBUFFER
	float4    _Color;
	sampler2D _DepthTex;
	float     _HorizonLengthRecip;
	float     _Sky;
	float4x4  _WorldToLocal;

	float _SoftParticlesFactor;
END_CBUFFER

BEGIN_CODE
	float GetOutsideDistance(float3 ray, float3 rayD)
	{
		float B = dot(ray, rayD);
		float C = dot(ray, ray) - 1.0f;
		float D = B * B - C;
		return max(-B - sqrt(max(D, 0.0f)), 0.0f);
	}

	float3 GetNear(float3 far)
	{
		float3 wcam = _WorldSpaceCameraPos;
		float3 near = mul(_WorldToLocal, float4(wcam, 1.0f)).xyz;
		float3 dir  = normalize(far - near);

		return near + dir * GetOutsideDistance(near, dir);
	}

	void ModifyVertex(inout VertexData v, inout ExtraV2F e)
	{
		float4 wpos = SGT_O2W(v.vertex);
		float3 far  = mul(_WorldToLocal, wpos).xyz;
		float3 near = GetNear(far);

		v.texcoord0.xy = length(near - far) * _HorizonLengthRecip;

		#if _SOFTNESS
			v.texcoord1.z = -SGT_O2V(v.vertex).z;
		#endif
	}

	void SurfaceFunction(inout Surface o, inout ShaderData d)
	{
		float4 depth = tex2D(_DepthTex, d.texcoord0.xx); depth.a = saturate(depth.a + (1.0f - depth.a) * _Sky);
		float4 main  = depth * _Color;
		float3 wcam  = _WorldSpaceCameraPos;

		#if _SOFTNESS
			float sceneZ = GetLinearEyeDepth(d.screenUV);
			float partZ = d.texcoord1.z;

			main.a *= smoothstep(0.0f, 1.0f, _SoftParticlesFactor * abs(sceneZ - partZ));
		#endif

		OutputWithAlpha(o, ModifyUnlitOutput(main));
	}
END_CODE