BEGIN_OPTIONS
	Workflow "Unlit"
	Alpha "Blend"
END_OPTIONS

BEGIN_PASS("All")
	Cull Front
END_PASS

BEGIN_PROPERTIES
	_Color("Color", Color) = (1, 1, 1, 1)
	_CubeTex("Cube Tex", CUBE) = "white" {}
	_FlowTex("Flow Tex", CUBE) = "white" {}
	_NoiseTex("Noise Tex", 3D) = "white" {}
	_DepthTex("Depth Tex", 2D) = "white" {}
	_Sky("Sky", Float) = 0

	_LightingTex("Lighting Tex", 2D) = "white" {}
	_AmbientColor("Ambient Color", Color) = (0,0,0)

	_ScatteringTex("Scattering Tex", 2D) = "white" {}
END_PROPERTIES

BEGIN_DEFINES
	#pragma multi_compile_local __ _SCATTERING
	#pragma multi_compile_local __ _LIT
END_DEFINES

BEGIN_SUBSHADERS
	"../../Shared/Shaders/SGT_Matrix.surfshader"
	"../../Shared/Shaders/SGT_Output.surfshader"
	"../../Shared/Shaders/SGT_Light.surfshader"
	"../../Shared/Shaders/SGT_Shadow.surfshader"
END_SUBSHADERS

BEGIN_CBUFFER
	float4      _Color;
	samplerCUBE _CubeTex;
	sampler2D   _DepthTex;
	float       _Sky;

	sampler2D _LightingTex;
	float3    _AmbientColor;

	sampler2D _ScatteringTex;
	float4x4  _WorldToLocal;
	float4x4  _LocalToWorld;

	samplerCUBE _FlowTex;
	sampler3D   _NoiseTex;
	float       _FlowSpeed;
	float       _FlowStrength;
	float       _FlowNoiseTiling;
END_CBUFFER

BEGIN_CODE
	float GetOutsideDistance(float3 ray, float3 rayD)
	{
		float B = dot(ray, rayD);
		float C = dot(ray, ray) - 1.0f;
		float D = B * B - C;
		return max(-B - sqrt(max(D, 0.0f)), 0.0f);
	}

	float3 GetNear(float3 far)
	{
		float3 wcam = _WorldSpaceCameraPos;
		float3 near = mul(_WorldToLocal, float4(wcam, 1.0f)).xyz;
		float3 dir  = normalize(far - near);

		return near + dir * GetOutsideDistance(near, dir);
	}

	float3x3 RotMat(float t)
	{
		float c = cos(t);
		float s = sin(t);
		return float3x3(c, 0, s, 0, 1, 0, -s, 0, c);
	}

	float4 GetColor(float3 p)
	{
		float4 flow  = texCUBE(_FlowTex, p) - 0.5f;
		float  noise = tex3D(_NoiseTex, p * _FlowNoiseTiling).r;

		float timeA = frac(_Time.x * _FlowSpeed + noise);
		float timeB = frac(timeA + 0.5f);
		float blend = abs(timeA * 2.0f - 1.0f);

		float3 vecA = mul(RotMat(flow.x * timeA * _FlowStrength), p);
		float3 vecB = mul(RotMat(flow.x * timeB * _FlowStrength), p);

		return lerp(texCUBE(_CubeTex, vecA), texCUBE(_CubeTex, vecB), blend);
	}

	void ModifyVertex(inout VertexData v, inout ExtraV2F e)
	{
		float4 wpos = SGT_O2W(v.vertex);
		float3 far  = mul(_WorldToLocal, wpos).xyz;
		float3 near = GetNear(far);

		v.texcoord0.x    = length(near - far);
		v.texcoord1.xyz  = float3(-near.x, near.yz);
		v.texcoord2.xyzw = mul(_LocalToWorld, float4(near, wpos.w));
		v.texcoord3.xyz  = near;
	}

	void SurfaceFunction(inout Surface o, inout ShaderData d)
	{
		float4 depth = tex2D(_DepthTex, d.texcoord0.xx); depth.a = saturate(depth.a + (1.0f - depth.a) * _Sky);
		float4 main  = _Color * GetColor(d.texcoord1.xyz) * depth;
		float3 wcam  = _WorldSpaceCameraPos;
		float3 wnorm = normalize(d.texcoord3.xyz);

		float4 finalColor = main;

		#if _LIT
			finalColor.rgb *= _AmbientColor;

			float4 lighting   = 0.0f;
			float4 scattering = 0.0f;

			for (int i = 0; i < SgtLightCount; i++)
			{
				float theta = dot(wnorm, SgtLightDirection[i]) * 0.5f + 0.5f;

				lighting += tex2D(_LightingTex, theta) * main * SgtLightColor[i];

				#if _SCATTERING
					float3 worldViewDir  = normalize(d.worldSpacePosition - wcam);
					float3 worldLightDir = normalize(SgtLightPosition[i].xyz - wcam);
					float  angle         = dot(worldViewDir, worldLightDir) * 0.5f + 0.5f;

					scattering += tex2D(_ScatteringTex, float2(theta, angle)) * SgtLightScatter[i];
				#endif
			}

			#if _SCATTERING
				//scattering *= finalColor.a; // Fade scattering out according to optical depth
				//scattering *= 1.0f - finalColor.a;
				//scattering *= saturate(1.0f - (finalColor + lighting)); // Only scatter into remaining rgba
				//lighting += scattering;

				scattering *= 1.0f - finalColor.a; // Only scatter into semi-transparent areas
				scattering *= main;
				lighting.xyz += scattering.xyz;
			#endif

			finalColor += lighting * ShadowColor(d.texcoord2.xyz);
			//finalColor += lighting * lerp(ShadowColor(d.texcoord2.xyz), 1.0f, finalColor.a);
			finalColor.a = saturate(main.a);
		#else
			finalColor = ModifyUnlitOutput(finalColor);
		#endif

		OutputWithAlpha(o, finalColor);
	}
END_CODE